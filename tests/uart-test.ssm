;; (define AUX_MU_IIR_REG  (+ PBASE #x00215048))
;; (define AUX_MU_LCR_REG  (+ PBASE #x0021504C))
;; (define AUX_MU_MCR_REG  (+ PBASE #x00215050))
;; (define AUX_MU_LSR_REG  (+ PBASE #x00215054))
;; (define AUX_MU_MSR_REG  (+ PBASE #x00215058))
;; (define AUX_MU_SCRATCH  (+ PBASE #x0021505C))
;; (define AUX_MU_CNTL_REG (+ PBASE #x00215060))
;; (define AUX_MU_STAT_REG (+ PBASE #x00215064))
;; (define AUX_MU_BAUD_REG (+ PBASE #x00215068))

(pseudo (ret)
  '(mov pc lr))

(pseudo (mov32 reg imm)
  `((movw ,reg ,(b& imm #xFFFF))
    (movt ,reg ,(b>> imm 16))))

(pseudo (delay reg count)
  `((mov ,reg ,count)
    (scope
      (subs ,reg ,reg 1)
      (b ?ne $enter))))

(pseudo (if cond then else)
  `((scope
      (scope
        (b ,(condition-invert cond) $exit)
        ,@then
        (b $exit^)))
    ,@else))

(pseudo (while test cond . then)
  `(scope
     ,test
     (b ,(condition-invert cond) $exit)
     ,@then
     (b $enter)))

(pseudo (when cond . then)
  `(scope
     (b ,(condition-invert cond) $exit)
     ,@then))

(pseudo (unless cond . then)
  `(scope
     (b ,cond $exit)
     ,@then))

(block main ()
  (while (cmp r0 0) ?eq
    (mov r1 r5)
    (mov r2 r6)
    (mov r8 r10)
    (adr r4 main)))

(align 510)
(resv (byte #xAA))
(resv (byte #x55))
